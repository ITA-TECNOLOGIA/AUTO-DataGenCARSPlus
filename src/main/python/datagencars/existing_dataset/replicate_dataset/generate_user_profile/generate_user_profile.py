import logging

from scipy.sparse.linalg import lsmr
import numpy as np


class GenerateUserProfile:

    '''
    Generates a user profile automatically from the original dataset. 
    For that, the LSMR method (An Iterative Algorithm for Sparse Least-Squares Problems)
    was used. [https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html]

    Input:
        [I] item.csv
        [C] context.csv
        [R] ratings.csv
    '''

    def __init__(self, ratings_df, item_df, context_df=None):        
        # Item file: item.csv
        self.item_df = item_df        
        # Context:
        if context_df:
            # Context file (optional): context.csv
            self.context_df = context_df        
        # Rating file: ratings.csv
        self.ratings_df = ratings_df

    def generate_user_profile(self):
        '''
        Gets the value of the weights (or unknown variables) by using LSMR method to generate the user profile.
        '''
        user_profile = None 

        a_matrix = self.get_a_matrix()
        b_vector = self.get_b_vector()
        x_vector = self.get_x_weigths(A=a_matrix, b=b_vector)

        return user_profile

    def get_a_matrix(self):
        a_matrix = None 
        return a_matrix

    def get_b_vector(self, user_id):
        # sourcery skip: inline-immediately-returned-variable
        '''
        Gets the b vector.
        :param user_id: The user ID.
        :return: The b vector.
        '''
        b_vector = None
        current_user_df = self.ratings_df.loc[self.ratings_df['user_id'] == user_id]
        rating_list = current_user_df['rating'].tolist()
        b_vector = np.array(rating_list, dtype=float)
        return b_vector

    def get_x_weigths(self, A, b):
        '''
        LSMR (An Iterative Algorithm for Sparse Least-Squares Problems), implemented in scipy.
        It solves the system of linear equations: A*X = B        
        
        :param A: Rectangular matrix in the linear system of dimension MxN, where all cases are allowed: M=N, M>N or M<N. The matrix A may be dense or sparse (usually sparse).
        :param b: Vector in the linear system of length N.
        :param X: Vector of float (Least-square solution), which are the incognites (or weigths) to be solved, by using the method => lsmr(A, b).

        In this case, for example for user 1:        
            A: These are the ratings per contextual attribute (items and/or contexts), generated by a user's utility function, for each item that the user evaluated.
            b: It is the set of item ratings of user 1.
            X: It is the set of relevance weights that are automatically determined, by each user, to the attributes of items and/or contexts, found in the user profile. And the (+) or (-) is the order of priority assigned by the users to the possible values of these attributes.

        '''
        # atol=0, btol=0, conlim=0        
        x = lsmr(A, b)
        return x

# gup = GenerateUserProfile()
# gup.generate_user_profile()
