from abc import ABC, abstractmethod
from scipy.sparse.linalg import lsmr


class GenerateUserProfile(ABC):

    def __init__(self):
        pass
    
    @abstractmethod
    def generate_user_profile(self):
        pass

    @abstractmethod
    def get_a_matrix(self, user_id):
        pass

    @abstractmethod    
    def get_b_vector(self, user_id):
        pass

    def get_x_weigths(self, A, b):
        '''
        LSMR (An Iterative Algorithm for Sparse Least-Squares Problems), implemented in scipy.
        It solves the system of linear equations: A*X = B        
        
        :param A: Rectangular matrix in the linear system of dimension MxN, where all cases are allowed: M=N, M>N or M<N. The matrix A may be dense or sparse (usually sparse).
        :param b: Vector in the linear system of length N.
        :param X: Vector of float (Least-square solution), which are the incognites (or weigths) to be solved, by using the method => lsmr(A, b).

        In this case, for example for user 1:        
            A: These are the ratings per contextual attribute (items and/or contexts), generated by a user's utility function, for each item that the user evaluated.
            b: It is the set of item ratings of user 1.
            X: It is the set of relevance weights that are automatically determined, by each user, to the attributes of items and/or contexts, found in the user profile. And the (+) or (-) is the order of priority assigned by the users to the possible values of these attributes.

        '''
        return lsmr(A, b)